<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>getch() getche() getchar()三者的区别</title>
    <url>/386126781.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/getch.jpg" width="848.46" height="300"><a id="more"></a><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/zongcilang.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio><hr><h3 id="getch"><a href="#getch" class="headerlink" title="getch()"></a>getch()</h3><p>包含于头文件&lt;conio.h&gt;中</p><p>特点：从键盘上读入一个字符，但<strong>不回显于显示器上</strong>，同时不以回车符为结束标志，而是输入一个字符后就立刻结束。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;%c\n&quot;, getch());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入：2</p><p>屏幕上的显示结果：</p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/getch%28%29.jpg" alt=""></p><h3 id="getche"><a href="#getche" class="headerlink" title="getche()"></a>getche()</h3><p>包含于头文件&lt;conio.h&gt;中</p><p>特点：从键盘读入一个字符，并且<strong>回显于显示器上</strong>，不以回车符为结束标志，而是输入一个字符后就立刻结束。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;%c\n&quot;, getche());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入：5</p><p>屏幕上的显示结果：</p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/getche%EF%BC%88%EF%BC%89.jpg" alt=""></p><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h3><p>包含于头文件&lt;stdio.h&gt;中</p><p>特点： 从键盘读入一个字符，并且<strong>回显于显示器上</strong>，以回车符为结束标志，如果输入多个字符，每次只读取一个。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;%c\n&quot;, getchar());</span><br><span class="line">    printf(&quot;%c\n&quot;, getchar());</span><br><span class="line">    printf(&quot;%c\n&quot;, getchar());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入：123</p><p>屏幕上的显示结果：</p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/getchar%28%29.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>Ｃ语言</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数组指针与指针数组的区分</title>
    <url>/3214607970.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><p>出处：<a href="http://www.cnblogs.com/hongcha717/archive/2010/10/24/1859780.html" target="_blank" rel="noopener">http://www.cnblogs.com/hongcha717/archive/2010/10/24/1859780.html</a></p><a id="more"></a><hr><h3 id="数组指针（也称行指针）"><a href="#数组指针（也称行指针）" class="headerlink" title="数组指针（也称行指针）"></a>数组指针（也称行指针）</h3><p>定义 int (*p)[n];</p><p>()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度。</p><p>如要将二维数组赋给一指针，应这样赋值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a[3][4];</span><br><span class="line"></span><br><span class="line">int (*p)[4]; &#x2F;&#x2F;该语句是定义一个数组指针，指向含4个元素的一维数组。</span><br><span class="line"></span><br><span class="line"> p&#x3D;a;        &#x2F;&#x2F;将该二维数组的首地址赋给p，也就是a[0]或&amp;a[0][0]</span><br><span class="line"></span><br><span class="line"> p++;       &#x2F;&#x2F;该语句执行过后，也就是p&#x3D;p+1;p跨过行a[0][]指向了行a[1][]</span><br></pre></td></tr></table></figure><p>所以数组指针也称指向一维数组的指针，亦称行指针。</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>定义 int *p[n];</p><p>[]优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。</p><p>这里执行p+1时，则p指向下一个数组元素，这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]…p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里 *p表示指针数组第一个元素的值，a的首地址的值。</p><p>如要将二维数组赋给一指针数组:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p[3];</span><br><span class="line"></span><br><span class="line">int a[3][4];</span><br><span class="line"></span><br><span class="line">p++; &#x2F;&#x2F;该语句表示p数组指向下一个数组元素。注：此数组每一个元素都是一个指针</span><br><span class="line"></span><br><span class="line">for(i&#x3D;0;i&lt;3;i++) &#123;</span><br><span class="line">    p[i]&#x3D;a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里int *p[3] 表示一个一维数组内存放着三个指针变量，分别是p[0]、p[1]、p[2]<br>所以要分别赋值。</p><p>这样两者的区别就豁然开朗了，数组指针只是一个指针变量，似乎是C语言里专门用来指向二维数组的，它占有内存中一个指针的存储空间。指针数组是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间。</p><p>还需要说明的一点就是，同时用来指向二维数组时，其引用和用数组名引用都是一样的。</p><p>比如要表示数组中i行j列一个元素：</p><p>*(p[i]+j)、*(*(p+i)+j)、(*(p+i))[j]、p[i][j]</p><p>优先级：()&gt;[]&gt;*</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>自然语言处理背后的智慧</title>
    <url>/2203894629.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/artificial-intelligence-3685928_640.png" width="848.46" height="300"><a id="more"></a><hr><p>&#8195;&#8195;如今，在我们的日常生活中或多或少都会出现这样一幕：我们对着手机上的虚拟私人助理说话，让它帮我们做一些简单的事情，或者我们调出手机中的谷歌翻译，希望它能帮助我们理解一些他国语言。这所有的一切都是自然语言处理技术得以广泛应用的结果。同时正是这种技术，在一定程度上极大地方便了我们的日常生活。那么问题来了，自然语言处理究竟是一种怎样的技术？为什么它在计算机领域受到广泛关注？又是为什么比尔盖茨将其成为“人工智能皇冠上的明珠”呢？在解决最后一个问题之前，我们先来探讨一下第一个问题。</p><p>&#8195;&#8195;什么是自然语言处理?</p><p>&#8195;&#8195;如果你学过某一种编程语言，你就会知道，现在人们让计算机理解某些事物或执行某种行为的主要方式就是编程。而对于那些没有学过编程的人们来说让他们操作计算机去做一些特定需求的事情，的确是有些难度。而自然语言处理技术就是为了解决这个问题。它可以将自然语言（也就是我们人类的语言）通过一系列处理转化为机器语言，从而实现人与计算机之间通过自然语言进行有效的通信。自然语言处理包含了两大方面的内容，一方面是自然语言理解，另一方面是自然语言生成。顾名思义，自然语言理解就是让机器理解我们说的话，而自然语言生成则是让机器能够“说话”。总而言之，自然语言处理是在机器语言和人类语言之间沟通的桥梁，最终的目的是为了实现人机交流。</p><p>&#8195;&#8195;为什么自然语言处理如此重要？</p><p>&#8195;&#8195;在人工智能出现之前，机器处理的数据必须是结构化的数据。但是网络中大部分的数据都是非结构化的，例如：文章、图片、音频、视频等等。而在非结构数据中，文本的数量是最多的，而文本是一种信息量很大的数据，所以如果无法准确的处理这些数据，我们将会丢弃很大部分的信息这无疑是人类的重大损失。为了能够分析和利用这些文本信息，我们就需要利用 NLP 技术，让机器理解这些文本信息，并加以利用。</p><p>&#8195;&#8195;为什么说自然语言处理是人工智能“皇冠上的明珠”？</p><p>&#8195;&#8195;在谈论机器之前，我们先把视角转换到人类自身上面，之所以做这样的转换是因为这会帮助我们理解自然语言处理对于人工智能的关键作用。让我们试想一下，如果人类社会没有语言，或者说人类如果不能理解语言这个世界会发生什么样的变化呢？如果想像不出来的话，我们可以借助网络上关于“狼孩”的电影来理解一下。没有了语言人类的思维将会收到极大的限制，这个时候的人可以说已经无法称之为人了，人将会和兽没有太大的区别。所以说，正是语言的能力，极大的发展了人的思维，让人能够在万物之中脱颖而出，语言是人类所特有的能力，也是人类赖以壮大的能力。好了，现在我们知道了语言对于人类的重要性，那么接下来，我们推己及物，不难理解自然语言处理能力对于人工智能的重要性。如果说人工智能是研究如何使机器具有智能的学问，那么，自然语言处理就是赋予机器智能的关健。通过对自然语言的处理，机器能够准确抓住自然语言想要表达的意思，从而按照自然语言的要求准确的执行我们想要的操作。我认为，当机器能够理解自然语言的那一刻到来之时，人工智能技术已经达到了相当高的水准，这时候的人们已经可以很自然的通过语言来操作机器而不需要通过复杂的编程。同时，此时的机器人可能已经具备了某种思维，但那都是后话，咱不在这里展开。</p><p>&#8195;&#8195;通过以上的分析，我们应该能够理解了自然语言处理的重要性，以及它对于人类生产力发展的推动力。语言是人类皇冠上的明珠，毫不客气，自然语言处理理所应当是人工智能皇冠上的明珠。</p><hr><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/%E6%B0%B4%E6%9C%88%E9%99%B5%20-%20%E6%9C%A8%E6%BC%8F%E3%82%8C%E6%97%A5%E3%81%AE%E3%81%95%E3%81%95%E3%82%84%E3%81%8D.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay></audio></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>生活剪影</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习——第四次工业革命的“背后推手”</title>
    <url>/3223075121.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/machinelearning.jpg" width="848.46" height="300"><a id="more"></a><hr><p>&#8195;&#8195;近些年来，在信息技术的强大推动下，物联网、人工智能等新兴技术飞速发展，而这些技术在一定程度上已经对人类社会的诸多方面产生了深刻影响。我们有理由相信，甚至不得不相信，这些技术将成为第四次工业革命的强有力支柱。迄今为止，我们人类已经历经了三次工业革命，无论是蒸汽技术革命，还是电力技术革命，亦或是计算机及信息技术革命，都给我们的社会生活和工业产业甚至是人类的发展带来了翻天覆地的变化。因此，我们要以预见性的态度对待第四次工业革命，要坚信它必定将是人类发展的重大转折点和伟大里程碑。</p><p>&#8195;&#8195;今天，人工智能技术以及机器人技术已经在工业领域初具规模，并且事实证明这些技术的应用极大地推动了社会生产力的发展。我相信，人工智能以及机器人技术将会成为人们在第四次工业革命道路上披荆斩棘的利器。人工智能将会成为第四次工业革命的核心产业。</p><p>&#8195;&#8195;既然人工智能是第四次工业革命的核心，那么机器学习将是第四次工业革命的强大“背后推手”。这是因为机器学习是人工智能的核心。如果将第四次工业革命比作是一辆疾驰的汽车，那么人工智能将是这辆汽车的驾驶人（之一），而机器学习就将是驾驶人强有力的大脑。我们都知道大脑是人的核心器官，因为它使我们有了学习的能力，正是因为学习，人类社会才有了长足的发展。既然如此，机器学习对于人工智能的重要性就不言而喻了。</p><p>&#8195;&#8195;机器学习，让人工智能具备了自己的大脑，让它拥有了学习的能力，而学习的能力又使它具备了处理更加复杂的问题的能力，而这种能力又将帮助人们解决以我们现有能力无法解决的问题。最终，一系列复杂问题得以解决将不可避免地推动社会生产力，以及人类社会地发展。这种以机器学习为“背后推手”，以人工智能为核心的人类社会进步，最终将会被视为第四次工业革命的重要组成部分。</p><p>&#8195;&#8195;通过以上的分析，我认为我们已经可以清楚的认识到机器学习对于第四次工业革命的重大意义。所以，将机器学习看作是第四次工业革命的“背后推手”，我觉得再合适不过。</p><p>&#8195;&#8195;历史的车轮滚滚向前，未来我们无法预知，我们唯有把握现在才能把握住未来的主动权。虽然，机器学习是第四次工业革命的“背后推手”，但是我始终相信在这个“背后推手”的背后，是我们人类的伟大智慧，人类的发展终究由人类自己推动。</p><hr><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/%E6%B0%B4%E6%9C%88%E9%99%B5%20-%20%E6%9C%A8%E6%BC%8F%E3%82%8C%E6%97%A5%E3%81%AE%E3%81%95%E3%81%95%E3%82%84%E3%81%8D.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay></audio></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>生活剪影</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>LaTex初步入门之安装</title>
    <url>/185893653.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex.jpg" width="848.46" height="300"><a id="more"></a><hr><h3 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h3><h4 id="安装编译器-ctex"><a href="#安装编译器-ctex" class="headerlink" title="安装编译器 ctex"></a>安装编译器 ctex</h4><ol><li>在能够使用Latex编写文本之前，我们首先要安装编译器，因为必须要有它才能将我们写的文件编译生成PDF，就像写c语言程序一样，在写完代码后，必须要有编译器才能生成程序。</li><li>现在我们开始安装。</li></ol><ul><li>我们登上这个网站 <a href="http://www.ctex.org/CTeX" target="_blank" rel="noopener">http://www.ctex.org/CTeX</a></li><li>点击download<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex1.png" alt=""></li><li>然后选择自己喜欢的镜像，下载里面的<code>.exe</code>文件</li><li>下载完之后我们点击安装即可（安装选项默认即可，安装目录可以自行选择）</li></ul><h4 id="安装编辑器texstudio"><a href="#安装编辑器texstudio" class="headerlink" title="安装编辑器texstudio"></a>安装编辑器texstudio</h4><ol><li>安装好了使用LaTeX的基础环境之后。为了便于编辑，我们需要安装一个编辑器，这里我们选择texstudio软件（后面会介绍另一款软件 vscode）</li><li>我们登上这个网站进行下载和安装即可 <a href="http://texstudio.sourceforge.net/" target="_blank" rel="noopener">http://texstudio.sourceforge.net/</a></li><li>安装完成之后，我们会发现软件是英文界面，我们点击程序最上面一栏的<code>option</code>选项，然后点击<code>configure Texstudio...</code> 选项 进行如下设置<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex2.png" alt=""></li><li>然后因为我们要编译中文，所以我们选择用xelatex比较方便<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex3.png" alt=""></li></ol><p>这样我们的编辑器和编译环境就安装完成了，我们就可以用latex来写我们的文章并生成PDF啦！</p><p><strong>但是，有很多小伙伴会发现，texstudio实在是太丑了，所以我们可以用一个比较美丽的软件来替代它，这个软件就是vscode</strong></p><h4 id="使用编辑器vscode"><a href="#使用编辑器vscode" class="headerlink" title="使用编辑器vscode"></a>使用编辑器vscode</h4><ol><li><p>具体安装过程就不再赘述，因为它比较常见</p></li><li><p>进入vscode后我们在拓展商店里搜索<code>latex</code>，然后下载里面的<code>LaTeX Workshop</code></p></li><li><p>下载完成之后，我们需要进行一些配置：<br>(1) 按住<code>ctrl</code>+<code>shift</code>+<code>p</code> 召唤出搜索，并输入<code>Preferences: Open Settings(JSON)</code><br>(2) 在setting中添加如下代码。注意，熟悉VSCode的人都知道，这是用户改变配置的地方，是JSON格式的。所以，{}一开始就存在，里面可能还有你之前的配置，那么你只要在你自己修改的配置后面，加入下面{}中LaTex相关的代码即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;latex-workshop.latex.recipes&quot;: [&#123;</span><br><span class="line">     &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">     &quot;tools&quot;: [</span><br><span class="line">         &quot;xelatex&quot;</span><br><span class="line">     ]</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     &quot;name&quot;: &quot;latexmk&quot;,</span><br><span class="line">     &quot;tools&quot;: [</span><br><span class="line">         &quot;latexmk&quot;</span><br><span class="line">     ]</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   &#123;</span><br><span class="line">     &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,</span><br><span class="line">     &quot;tools&quot;: [</span><br><span class="line">         &quot;pdflatex&quot;,</span><br><span class="line">         &quot;bibtex&quot;,</span><br><span class="line">         &quot;pdflatex&quot;,</span><br><span class="line">         &quot;pdflatex&quot;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;latex-workshop.latex.tools&quot;: [&#123;</span><br><span class="line">   &quot;name&quot;: &quot;latexmk&quot;,</span><br><span class="line">   &quot;command&quot;: &quot;latexmk&quot;,</span><br><span class="line">   &quot;args&quot;: [</span><br><span class="line">     &quot;-synctex&#x3D;1&quot;,</span><br><span class="line">     &quot;-interaction&#x3D;nonstopmode&quot;,</span><br><span class="line">     &quot;-file-line-error&quot;,</span><br><span class="line">     &quot;-pdf&quot;,</span><br><span class="line">     &quot;%DOC%&quot;</span><br><span class="line">   ]</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">   &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">   &quot;command&quot;: &quot;xelatex&quot;,</span><br><span class="line">   &quot;args&quot;: [</span><br><span class="line">     &quot;-synctex&#x3D;1&quot;,</span><br><span class="line">     &quot;-interaction&#x3D;nonstopmode&quot;,</span><br><span class="line">     &quot;-file-line-error&quot;,</span><br><span class="line">     &quot;%DOC%&quot;</span><br><span class="line">   ]</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">   &quot;name&quot;: &quot;pdflatex&quot;,</span><br><span class="line">   &quot;command&quot;: &quot;pdflatex&quot;,</span><br><span class="line">   &quot;args&quot;: [</span><br><span class="line">     &quot;-synctex&#x3D;1&quot;,</span><br><span class="line">     &quot;-interaction&#x3D;nonstopmode&quot;,</span><br><span class="line">     &quot;-file-line-error&quot;,</span><br><span class="line">     &quot;%DOC%&quot;</span><br><span class="line">   ]</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">   &quot;name&quot;: &quot;bibtex&quot;,</span><br><span class="line">   &quot;command&quot;: &quot;bibtex&quot;,</span><br><span class="line">   &quot;args&quot;: [</span><br><span class="line">     &quot;%DOCFILE%&quot;</span><br><span class="line">   ]</span><br><span class="line">   &#125;],</span><br><span class="line">   &quot;latex-workshop.view.pdf.viewer&quot;: &quot;tab&quot;,</span><br><span class="line">   &quot;latex-workshop.latex.clean.fileTypes&quot;: [</span><br><span class="line">   &quot;*.aux&quot;,</span><br><span class="line">   &quot;*.bbl&quot;,</span><br><span class="line">   &quot;*.blg&quot;,</span><br><span class="line">   &quot;*.idx&quot;,</span><br><span class="line">   &quot;*.ind&quot;,</span><br><span class="line">   &quot;*.lof&quot;,</span><br><span class="line">   &quot;*.lot&quot;,</span><br><span class="line">   &quot;*.out&quot;,</span><br><span class="line">   &quot;*.toc&quot;,</span><br><span class="line">   &quot;*.acn&quot;,</span><br><span class="line">   &quot;*.acr&quot;,</span><br><span class="line">   &quot;*.alg&quot;,</span><br><span class="line">   &quot;*.glg&quot;,</span><br><span class="line">   &quot;*.glo&quot;,</span><br><span class="line">   &quot;*.gls&quot;,</span><br><span class="line">   &quot;*.ist&quot;,</span><br><span class="line">   &quot;*.fls&quot;,</span><br><span class="line">   &quot;*.log&quot;,</span><br><span class="line">   &quot;*.fdb_latexmk&quot;</span><br><span class="line">   ],</span><br></pre></td></tr></table></figure></li><li><p>这样我们就可以使用vscode啦，注意build文件时系统会给予一个worning，我们忽略就好，它影响不大。</p></li></ol><h3 id="linux系统（以Ubuntu为例）"><a href="#linux系统（以Ubuntu为例）" class="headerlink" title="linux系统（以Ubuntu为例）"></a>linux系统（以Ubuntu为例）</h3><ol><li>首先，同时按下“Alt+Ctrl+t”键，打开终端，如下图所示。<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex4.png" alt=""></li><li>在终端中输入“sudo apt-get install texlive-full”如下图红色方框中所示。按回车后需要输入密码，就是Ubuntu系统账户的密码。这一步需要较长时间，如果不想安装所有文件，可以选择“sudo apt-get install texlive”。<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex5.png" alt=""></li><li>当出现“Do you want to continue? [Y/n]”时（如下图所示），输入字母y，回车即可。<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex6.png" alt=""></li><li>之后等待即可。这时我们就安装好了使用LaTeX的基础环境。为了便于编辑，我们需要安装一个编辑器，这里以texmaker为例说明。在终端输入“sudo apt-get install texmaker”，如下图所示。<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex7.png" alt=""></li><li>安装好，在终端输入“texmaker”即可打开texmaker。<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Latex8.png" alt=""></li></ol><p><strong>注：linux上的安装方法来自<a href="https://zhidao.baidu.com/question/717418135767804565.html" target="_blank" rel="noopener">百度知道</a></strong></p><p>有朋友可能会问可不可以在Linux上使用vscode呢？在Linux上使用vscode总是显示错误，笔者暂时没有找到解决方法，所以目前只有以上解决方法，有解决之道的朋友可以在留言区留言哦。</p><hr><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/big%20fish.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Luogu刷题笔记</title>
    <url>/4290227650.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/luogu1-1.jpg" width="848.46" height="300"><a id="more"></a><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/BGM1.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio></p><hr><h4 id="P1579-哥德巴赫猜想-升级版"><a href="#P1579-哥德巴赫猜想-升级版" class="headerlink" title="P1579 哥德巴赫猜想(升级版)"></a>P1579 哥德巴赫猜想(升级版)</h4><p><strong>题目描述</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在请你编一个程序验证哥德巴赫猜想。</span><br><span class="line"></span><br><span class="line">先给出一个奇数n，要求输出3个质数，这3个质数之和等于输入的奇数。</span><br></pre></td></tr></table></figure><p><strong>输入格式</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">仅有一行，包含一个正奇数n，其中9&lt;n&lt;20000</span><br></pre></td></tr></table></figure><p><strong>输出格式</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">仅有一行，输出3个质数，这3个质数之和等于输入的奇数。</span><br><span class="line">相邻两个质数之间用一个空格隔开，最后一个质数后面没有空格。</span><br><span class="line">如果表示方法不唯一，请输出第一个质数最小的方案，如果第一</span><br><span class="line">个质数最小的方案不唯一，请输出第一个质数最小的同时，第二</span><br><span class="line">个质数最小的方案。</span><br></pre></td></tr></table></figure><p><strong>输入输出样例</strong><br>输入：<code>2009</code><br>输出：<code>3 3 2003</code></p><p><strong>思路</strong><br>利用三层循环(第三层似乎不重要)，第一层一个质数，第二层一个质数，再判断第三层是否满足，若满足则输出。</p><p><strong>代码１</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int is_prime(int i);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, a, b, c;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    for(int i &#x3D; 2; i &lt; n; i ++ ) &#123;</span><br><span class="line">        if(is_prime(i)) &#123;</span><br><span class="line">            for(int j &#x3D; 2; j &lt; n; j ++) &#123;</span><br><span class="line">                if(is_prime(j)) &#123;</span><br><span class="line">                    int k &#x3D; n - i - j;              &#x2F;&#x2F;注意这一行，这是一种优化的方案，如果继续使用for(int k &#x3D; 2; k &lt; n; k ++)会导致时间复杂程度偏高</span><br><span class="line">                    if(is_prime(k) &amp;&amp; k !&#x3D; 0 &amp;&amp; k !&#x3D; 1) &#123;          &#x2F;&#x2F;注意if 里面的判断条件</span><br><span class="line">                        if(i + j + k &#x3D;&#x3D; n) &#123;</span><br><span class="line">                            printf(&quot;%d %d %d&quot;, i, j, k);</span><br><span class="line">                            goto Flag;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Flag: ;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int is_prime(int i) &#123;</span><br><span class="line">    if(i &#x3D;&#x3D; 2) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j &#x3D; 2; j &lt;&#x3D; fabs(sqrt(i)); j ++) &#123;</span><br><span class="line">        if(i % j &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int is_prime(int i);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n, a, b, c;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    for(int i &#x3D; 2; i &lt; n&#x2F;3; i ++ ) &#123;</span><br><span class="line">        if(is_prime(i)) &#123;</span><br><span class="line">            for(int j &#x3D; 2; j &lt; n&#x2F;3; j ++) &#123;</span><br><span class="line">                if(is_prime(j)) &#123;</span><br><span class="line">                    for(int k &#x3D; n&#x2F;3; k &lt; n; k ++) &#123;</span><br><span class="line">                        if(is_prime(k)) &#123;</span><br><span class="line">                            if(i + j + k &#x3D;&#x3D; n) &#123;</span><br><span class="line">                                printf(&quot;%d %d %d&quot;, i, j, k);</span><br><span class="line">                                return 0;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int is_prime(int i) &#123;</span><br><span class="line">    if(i &#x3D;&#x3D; 2) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j &#x3D; 2; j &lt;&#x3D; fabs(sqrt(i)); j ++) &#123;</span><br><span class="line">        if(i % j &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title>春节与肺炎的“邂逅”</title>
    <url>/3660575170.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/essay2_1.jpeg" width="848.46" height="300"><a id="more"></a><hr><p>&#8195;&#8195;2020年，注定是不平凡的一年……</p><p>&#8195;&#8195;春节，这个本应该欢快热闹的节日，被一场突如其来的肺炎疫情打破。热闹的街市变成了空巷，笑语欢声归于寂静，整个世界仿佛进入了幻境，悄无声息。此刻的人们，已不再关注于除夕之夜的其乐融融以及大年初一走街串巷，他们早已将注意力转移到了千里之外的湖北武汉，那里正进行着一场紧张刺激的战争——一场没有硝烟却不知将有几人牺牲的战争。</p><p>&#8195;&#8195;这一切，都要从几个月前说起……</p><p>&#8195;&#8195;2019年12月8日，武汉市通报的首例不明原因肺炎患者发病<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。这首个病例似乎并没有引起人们的特别关注，此时的人们依然过着平静的生活，世界依然如旧。然而，我们却不知，一场即将影响全国的疫情正在匿声发酵。</p><p>&#8195;&#8195;2019年12月30日，武汉市卫生健康委发布的《关于做好不明原因肺炎救治工作的紧急通知》在网络上广泛传播，不明原因肺炎逐渐引起人们注意。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>&#8195;&#8195;2020年1月9日，我校放假了，同学们都欢欣地踏上了返乡的旅程，而我也于12日乘上了驶向家乡的高铁。又是一年春来到，又是一年春满园。“回家过年”总是中国人心中难以割舍的情怀，而我也热切地盼着春节的到来，期待着那“千家万户曈曈日，总把新桃换旧符”的大年三十。</p><p>&#8195;&#8195;2020年1月24日，除夕。事情发展的好像超出了预期。就在前一天，武汉市宣布封城，形势突然严峻起来。已经是大年三十了，而今年的除夕夜却与众不同，甚至对于某些人来说，刻骨铭心。在这个本该万家灯火的节日，武汉的医务工作者们正在生死线上与死神，与病魔斗争着。武汉版“小汤山”也于今日开工建造，这一夜，也必将是数千工人师傅生命中铭记的一夜。晚上８点了，一年一度的春晚拉开了序幕。特别的日子必将有特别的节目，作为本次春晚中唯一没有排练过的节目，《爱是桥梁》感动了无数电视机前的观众。“隔离病毒，但不隔离爱”此刻的我、我的家人以及其他家庭的人们，都密切关注着武汉——这个生了病的朋友。疫情无情而人心向暖，全国人民万众一心，在这个世界上就没有困住我们中华儿女的逆境。</p><p>&#8195;&#8195;2020年1月25日，大年初一。街道上安安静静，人们都积极地响应者政府的号召，宅在家里，而我也安安静静的做了个“美男子”(滑稽脸)。没有了走街串巷，却仍少不了拜年问好，只是人们都转移了阵地，线上拜年引领了潮流。冷面对疫情，热心向人情，无论什么困境，都割不断我们中华儿女之间的温情纽带。</p><p>&#8195;&#8195;2020年1月28日，正月初四。这一天，以往在我们家里总是热闹的一天，奶奶、叔叔、姑姑、哥哥、姐姐齐聚一堂，欢庆新春。而今年，为己为人，为不给社会添乱，“从大局考虑，今年家庭聚会取消”的通知也从“相亲相爱一家人”微信群中发出。热闹的一天也归于宁静。</p><p>&#8195;&#8195;2020年1月30日。百无聊赖的我第9次打开腾讯新闻时，被火神山建设直播吸引住了。终于……，我成为了4000多万云监工的一员。“山东监工来了～，各位可以去吃饭了^^”。借助“摄政王”(直播摄像头)的慧眼，我清楚的“监视”建设场地里的点点滴滴。看迎面向我们驶来的是“叉酱”(小叉车)，它小小的身躯，却在最努力地工作着。“守护全世界最好的叉酱呀！！！”</p><p>&#8195;&#8195;2020年2月1日。来自山东威海市某小区的硬核播报:“现在是关键时期，关键时期，白一天天咋咋呼呼的凑一堆打麻将打扑克的哈，老老实实地跟捏炕头上坐着哈点茶水。家里有么就歹点么，什么粑粑饼儿，菜饺guzhi，该吃就吃，白出来瞎嘚瑟。”———大家自行意会^^</p><p>&#8195;&#8195;2020年2月7日。已经有1.2.3.4……好多好多天没出去了，感觉自己要发霉了。各位看官，在下给你们演个蛆吧……。在今天新冠肺炎累计确诊超过了３万，疫情形式依然十分严峻。一方有难八方支援，看着某音上发的各地的支援视频，我的内心受到了极大地震撼，这就是中国的力量，这就是中国人的担当，武汉加油，中国加油，我相信我们中华民族定能战胜困难。</p><p>&#8195;&#8195;迄今为止，中华民族已经历经了几千年，在这几千年中，我们中华民族之所以能历经挫折而不断奋起，历尽苦难而淬火成钢，归根到底在于我们中华儿女的自强不息和顽强奋斗，以及包涵在民族精神深处的大爱无疆。新冠肺炎是继2003年非典以来的又一大挑战，03年我们顽强挺过，在技术更加先进的20年，我相信，我们必然能行。</p><blockquote class="blockquote-center"><p>众志成城，共抗疫情<br>加油武汉，加油中国</p></blockquote><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/essay2_music.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay></audio></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/essay2_1.png" target="_blank" rel="noopener">新闻截图</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>生活剪影</category>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客的备份问题</title>
    <url>/1072746924.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing8.jpg" width="848.46" height="300"><a id="more"></a><p>之前，由于魔改hexo主题，不知不觉地把hexo搞崩了，整整两天的努力就这样化为泡影，哇！心态崩了啊－_－。这次之后，我终于意识到备份的重要性，亡羊补牢，吃一堑长一智，开搞。</p><hr><h3 id="备份的整体思路"><a href="#备份的整体思路" class="headerlink" title="备份的整体思路"></a>备份的整体思路</h3><p>利用github的仓库储存博客的<strong><em>所有内容</em></strong>，包括源文件和配置文件。当需要恢复时，只需要git clone下来即可。</p><h3 id="备份的具体操作"><a href="#备份的具体操作" class="headerlink" title="备份的具体操作"></a>备份的具体操作</h3><h4 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="(1)创建github仓库"></a>(1)创建github仓库</h4><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/backup1.png" alt="我的一些参数"><br>我的建议是创建一个private仓库，毕竟博客的所有参数都存在里面。为了保险起见，还是不公开为好。</p><h4 id="2-创建本地仓库"><a href="#2-创建本地仓库" class="headerlink" title="(2)创建本地仓库"></a>(2)创建本地仓库</h4><ol><li>在本地的博客文件夹里的根目录下<code>git init</code></li><li>如果你使用的主题是git clone 下来的，那么，需要跳转到主题文件夹把改主题文件夹下的<code>.git</code>文件夹删掉，否则该文件夹里的内容将无法push到github上。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>类似的，如果你的某些文件夹下的内容是git clone 下来的，那也需要将<code>.git</code>文件夹删掉。</li></ol><h4 id="3-建立本地库和线上库的联系"><a href="#3-建立本地库和线上库的联系" class="headerlink" title="(3)建立本地库和线上库的联系"></a>(3)建立本地库和线上库的联系</h4><ol><li>添加ssh，建立联等操作我就不具体介绍了，不会的参考<a href="https://xiaotong-sun.gitee.io/1010621300.html#%E5%85%AB%EF%BC%9A%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E5%BA%93">这篇文章</a></li></ol><h4 id="4-将本地库里的博客资源push到github上"><a href="#4-将本地库里的博客资源push到github上" class="headerlink" title="(4)将本地库里的博客资源push到github上"></a>(4)将本地库里的博客资源push到github上</h4><ol><li>关联完成之后我们就开始推送了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br><span class="line">$ git commit -m &quot;add all file&quot;</span><br><span class="line">$git push origin master</span><br></pre></td></tr></table></figure></li><li>推送完成之后备份就成功了。<br>细心的童鞋可能会发现node_modules文件夹并没有得到备份，这没有太大关系，在后面会介绍如何恢复。</li></ol><h3 id="恢复的具体操作"><a href="#恢复的具体操作" class="headerlink" title="恢复的具体操作"></a>恢复的具体操作</h3><p>如果你是在原电脑上恢复，那么直接进行以下操作即可。如果是在另一台电脑上恢复，请确保该电脑已经安装<code>node.js</code>，<code>npm</code>和<code>hexo命令</code>,详细操作见<a href="https://xiaotong-sun.gitee.io/2039746793.html#more">这篇文章</a></p><h4 id="1-本地创建文件夹，git-clone"><a href="#1-本地创建文件夹，git-clone" class="headerlink" title="(1)本地创建文件夹，git clone"></a>(1)本地创建文件夹，git clone</h4><ol><li>选择一处文件夹<code>git clone</code>备份的文件。</li><li>待clone完之后，资源文件就恢复完成了。</li><li>此时会自动创建backup文件夹，里面就是所有资源文件。你也可以重命名该文件夹</li></ol><h4 id="2-恢复所需插件"><a href="#2-恢复所需插件" class="headerlink" title="(2)恢复所需插件"></a>(2)恢复所需插件</h4><ol><li>在backup文件夹里，运行命令<code>npm install</code>这样所依赖的所有插件就恢复完成了。</li></ol><h4 id="3-hexo-三连"><a href="#3-hexo-三连" class="headerlink" title="(3)hexo 三连"></a>(3)hexo 三连</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p><strong>恭喜完成恢复</strong><br><strong>耶～～～～</strong></p><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/big%20fish.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">这样做将会导致无法用git-pull获取主题的更新</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div><p></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Lintcode刷题笔记</title>
    <url>/911783765.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing7.jpg" width="848.46" height="300"><a id="more"></a><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/BGM1.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio><hr><h4 id="尾部的零"><a href="#尾部的零" class="headerlink" title="尾部的零"></a>尾部的零</h4><p><strong>描述:</strong></p><blockquote><p>设计一个算法，计算出n阶乘中尾部零的个数</p></blockquote><p><strong>样例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">样例  1:</span><br><span class="line">	输入: 11</span><br><span class="line">	输出: 2</span><br><span class="line">	</span><br><span class="line">	样例解释: </span><br><span class="line">    11! &#x3D; 39916800, 结尾的0有2个。</span><br><span class="line"></span><br><span class="line">样例 2:</span><br><span class="line">	输入:  5</span><br><span class="line">	输出: 1</span><br><span class="line">	</span><br><span class="line">	样例解释: </span><br><span class="line">	5! &#x3D; 120， 结尾的0有1个。</span><br></pre></td></tr></table></figure><p><strong>问题分析：</strong></p><p>第一种方案(超时)：<br>1、计算输入值的 n阶乘的结果<br>2、对于阶乘的结果计算尾数的零</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">* @param n: An integer</span><br><span class="line">* @return: An integer, denote the number of trailing zeros in n!</span><br><span class="line">*&#x2F;</span><br><span class="line">public long trailingZeros(long n) &#123;</span><br><span class="line">long nu&#x3D;recursion(n);</span><br><span class="line">long size&#x3D;0;</span><br><span class="line">while(nu%10&#x3D;&#x3D;0)&#123;</span><br><span class="line">size++;</span><br><span class="line">nu&#x3D;nu&#x2F;10;</span><br><span class="line">&#125;</span><br><span class="line">return size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 该模块用于计算阶乘</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static long recursion(long num) &#123;</span><br><span class="line">	long sum&#x3D;1;</span><br><span class="line">	if(num&#x3D;&#x3D;0) &#123;</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;else if(num&#x3D;&#x3D;1) &#123;</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		sum&#x3D;num*recursion(num-1);</span><br><span class="line">		return sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方案（合理）：<br>一个数 n 的阶乘末尾有多少个 0 取决于从 1 到 n 的各个数的因子中 2 和 5 的个数<br>而 2 的个数是远远多余 5 的个数的, 因此求出 5 的个数即可<br>题解中给出的求解因子 5 的个数的方法是用 n 不断除以 5, 直到结果为 0<br>然后把中间得到的结果累加. 例如, 100/5 = 20, 20/5 = 4, 4/5 = 0<br>则 1 到 100 中因子 5 的个数为 (20 + 4 + 0) = 24 个<br>即 100 的阶乘末尾有 24 个 0. 其实不断除以 5<br>是因为每间隔 5 个数有一个数可以被 5 整除, 然后在这些可被 5 整除的数中<br>每间隔 5 个数又有一个可以被 25 整除, 故要再除一次, … 直到结果为 0, 表示没有能继续被 5 整除的数了.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public:</span><br><span class="line">    &#x2F;*</span><br><span class="line">     * @param n: A long integer</span><br><span class="line">     * @return: An integer, denote the number of trailing zeros in n!</span><br><span class="line">     *&#x2F;</span><br><span class="line">    long long trailingZeros(long long n) &#123;</span><br><span class="line">   long long sum &#x3D; 0;</span><br><span class="line">        while (n !&#x3D; 0) &#123;</span><br><span class="line">            sum +&#x3D; n &#x2F; 5;</span><br><span class="line">            n &#x2F;&#x3D; 5;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>Lintcode</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇的指针</title>
    <url>/1853691604.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing3.jpg" width="848.46" height="300"><a id="more"></a><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/zongcilang.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio>---<table><thead><tr><th align="left">内容</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">何谓指针</td><td align="left">指针是一种特殊的数据类型</td></tr><tr><td align="left">何谓指针变量</td><td align="left">1. 指针变量是具有指针类型的变量，是专门用于储存变量地址的变量<br>2. 指针变量的特殊性表现在：它的内容只能是地址，而不能是数据；必须<strong>初始化</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>才能使用，否则指向不确定的储存单元；只能指向同一基类型的变量；只能参与加（减）整数，自增，自减，关系，赋值等运算</td></tr><tr><td align="left">指针变量的定义和初始化</td><td align="left">使用指针变量之前必须初始化，<strong>定义指针的同时为其初始化是一种良好的编程习惯</strong></td></tr><tr><td align="left">取地址运算符＆</td><td align="left">用于获取变量的内存地址</td></tr><tr><td align="left">间接寻址运算符 *</td><td align="left">用于访问变量的内容</td></tr><tr><td align="left">指针做函参数</td><td align="left">指针做函数参数是<strong>模拟按引用调用</strong>，需要将<strong>函数外的某个变量的地址</strong>作为实参传递给函数相应的指针形参</td></tr><tr><td align="left">函数指针<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></td><td align="left">函数指针就是<strong>指向函数的指针</strong>，指向函数的指针变量中储存的是一个函数在内存中的入口地址</td></tr><tr><td align="left">使用指针时应恪守的原则</td><td align="left">1.永远清楚每个指针指向什么位置<br>2.永远清楚每个指针指向的位置的内容是什么<br>3.永远不要使用未初始化的指针</td></tr></tbody></table><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top">初始化的两种方法:<br>1. <strong>int * pa = &amp;a;或int * pa = NULL;</strong><br>2. <strong>int *pa; pa = &amp;a;</strong></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top">函数指针声明：<br><strong>int ( * compare)(int a, int b)</strong> 注意区别<code>int *compare(int a, int b)</code><br>1. 前者：compare是一个指针变量，该指针指向的是函数<br>2. 后者：它声明的不是一个函数指针，而是一个<strong>两个整型形参并返回整形指针的函数</strong></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>Ｃ语言</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>飞</title>
    <url>/1792223036.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing5.jpg" width="848.46" height="300"><a id="more"></a><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Fly.mp3" style="max-height:100%;max-width:100%;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio><blockquote class="blockquote-center"><p>风浪没平息 我宣告奔跑的意义</p><p>这不是叛逆 我只是淋了一场雨</p><p>没怀疑 燃烧的梦都飞哪去</p><p>问自己 这次我不会放弃</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>生活剪影</category>
        <category>摘抄</category>
      </categories>
  </entry>
  <entry>
    <title>Git 学习笔记</title>
    <url>/1010621300.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing2.jpg" width="848.46" height="300"><a id="more"></a><p><strong>以下内容只是一些基本的git命令和操作，具体内容和具体操作参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784</a></strong></p><hr><h3 id="一：git简介"><a href="#一：git简介" class="headerlink" title="一：git简介"></a>一：git简介</h3><ul><li>git是目前世界上最先进的<strong>分布式版本控制系统</strong></li><li>版本控制系统：可以储存一个文件在不同时间的版本，记录<strong>每次文件的改动</strong>，可以根据需要，随时<strong>切换到之前的版本</strong>。</li><li>分布式VS集中式：</li></ul><table><thead><tr><th align="center"></th><th align="center">中央服务器</th><th align="center">是否需要联网</th><th align="center">安全性</th></tr></thead><tbody><tr><td align="center">集中式</td><td align="center">需要</td><td align="center">需要</td><td align="center">低</td></tr><tr><td align="center">分布式</td><td align="center">不需要</td><td align="center">不需要</td><td align="center">高</td></tr></tbody></table><h3 id="二：安装git"><a href="#二：安装git" class="headerlink" title="二：安装git"></a>二：安装git</h3><ol><li>在Linux上安装<br>终端输入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install git</span><br></pre></td></tr></table></figure></li><li>在Windows上安装git<br>在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。<br>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</li></ol><ul><li>安装完成后，需要在终端进行设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your name&quot;</span><br><span class="line">$git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><code>--global</code>是一个全局变量参数</li></ul><h3 id="三：创建版本库"><a href="#三：创建版本库" class="headerlink" title="三：创建版本库"></a>三：创建版本库</h3><ol><li><p>首先，选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit </span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line"> &#x2F;Users&#x2F;michael&#x2F;learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令用于显示当前目录。在我的电脑上，这个仓库位于<code>/Users/michael/learngit</code></p></li><li><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in &#x2F;Users&#x2F;michael&#x2F;learngit&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure><p>创建完成后会在当前目录下出现一个<code>.git</code>文件，若没有看见是因为这个目录默认为隐藏文件，用<code>ls -ah</code>命令就可以看见</p></li><li><p>把文件添加到版本库:<br>用命令 <code>vim a.txt</code> 在git仓库中编写一个文件<br>把一个文件放到Git仓库只需要两步</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add a.txt</span><br></pre></td></tr></table></figure><p>第二步，用命令git commit告诉Git，把文件提交到仓库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit命令</code>，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p></li></ol><h3 id="四：版本退回"><a href="#四：版本退回" class="headerlink" title="四：版本退回"></a>四：版本退回</h3><ol><li><code>git status</code>–&gt;让我们掌握仓库当前的状态</li><li><code>git diff &lt; file &gt;</code>–&gt;查看文件当前的改动</li><li><code>git reset --hard HEAD^</code>–&gt;返回上次提交的版本</li><li><code>git reset --hard &lt; commit id &gt;</code>–&gt;返回你想返回的文件版本</li><li><code>git log --pretty=oneline</code>–&gt;查看commit id</li><li><code>git reflog</code>–&gt;用来记录每一次的命令</li></ol><h3 id="五：管理修改"><a href="#五：管理修改" class="headerlink" title="五：管理修改"></a>五：管理修改</h3><p>每次修改如果不用<code>git add</code>到暂存区,就不会加入到commit中<code>git diff HEAD -- &lt;file&gt;</code>可以查看工作区和版本库里最新版本的区别。</p><h3 id="六：撤销修改"><a href="#六：撤销修改" class="headerlink" title="六：撤销修改"></a>六：撤销修改</h3><p><code>git checkout -- file</code> 可以把工作区的修改全部撤销掉:<br><strong>两种情况:</strong><br>一种是readme.txt自修改后还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态;<br>一种是readme.txt已经添加到暂存区后,又作了修改,现在,撤销修改就回到添加到暂存区后的状态。<br><code>git reset HEAD file</code>可以把暂存区的修改撤销掉,重新放到工作区中。<code>HEAD</code>表示最新版本</p><h3 id="七：文件删除"><a href="#七：文件删除" class="headerlink" title="七：文件删除"></a>七：文件删除</h3><p><code>rm file</code>将工作区文件删掉。 #仅删除工作区<br><code>git rm file</code>从版本库将文件删掉,并且需要<code>git commit</code> 　 #删除工作区,并删除版本库<br>若是误删,用<code>git checkout -- file</code>将文件恢复到最新版。仅对rm有效</p><h3 id="八：添加远程库"><a href="#八：添加远程库" class="headerlink" title="八：添加远程库"></a>八：添加远程库</h3><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。<br>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/0.png" alt=""><br>点＂Add Key”，你就应该看到已经添加的key:<br><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/hh.png" alt=""></p><p><strong>使本地仓库和远程库关联起来:</strong><br><code>git remote add origin git@github.com:xiaotong-sun/xxxx.git</code><br>Origin 是远程库的名字,可以改成别的。 改名命令:<code>git remote rename origin xx</code></p><p><strong>第一次</strong>把本地库的所有内容推送到远程库上时的操作:<br><code>git push -u origin master</code><br>此后每次提交使用:<code>git push origin master</code></p><h3 id="九：从远程库克隆"><a href="#九：从远程库克隆" class="headerlink" title="九：从远程库克隆"></a>九：从远程库克隆</h3><p>已有远程库,使用命令克隆一个本地库:<br><code>git clone git@github.com:xiaotong-sun/xxxxx.git</code></p><h3 id="十：分支管理"><a href="#十：分支管理" class="headerlink" title="十：分支管理"></a>十：分支管理</h3><ol><li>创建分支:<code>git checkout -b dev</code> (dev为分支的名字,你可以随便起)<br><code>git checkout</code> + <code>-b</code> 表示创建并切换—&gt;相当于—&gt;<code>git branch dev</code>&amp;&amp; <code>git checkout dev</code>两条命令<br><code>git switch -c dev</code>—&gt;也可以用来创建并切换新的分支<br><code>git branch</code>—&gt;可以用来查看当前分支</li><li>删除分支:<br><code>git branch -d dev</code></li><li>合并分支:合并某分支到当前分支:<br><code>git merge &lt; file &gt;</code></li><li>解决冲突:<br>当主分支和次分支都修改了部分内容,此时将无法快速合并这时可以直接查看,并将冲突修改后方可合并<br><code>git log --graph --pretty=oneline --abbrev-commit</code>—&gt;将提交版本整理成图形</li><li>分支管理策略:<br><code>git merge file</code>是一种fast forward合并,这种合并看不出来曾经做过合并<br><code>git merge --no-ff -m “”</code> ➕<code>dev</code> 是一种普通的合并,能看出合并历史。</li><li>bug分支:<br>用<code>git stash</code>将手头进行的工作现场储存下来,之后就可以放心的去修bug了<br>修bug时,要首先跳到bug所在分支,并在那个分支上创建一个分支用来修bug,修完之后将其合并。<br>返回原来干活的分支,<code>git stash list</code>查看存放的工作现场。<br><code>git stash apply</code>恢复,但stash内容不删除。<br>用<code>git stash drop</code>来删除<br>而<code>git stash pop</code>在恢复的同时也将<strong>stash内容删除了</strong><br>若存放了多个现场,用<code>git stash apply stash@{0}</code>来指定恢复<br>若主分支和次分支同时存在相同的bug,那么可用<code>git cherry-pick (序列号)</code>来复制这个bug的修改</li><li>feature 分支<br>开发一个新的feature,最好新建一个分支;如果要丢弃一个没有被合并过的分支可以通过<code>git branch -D file</code> 强行删除</li><li>多人协作<br><code>git remote</code>查看远程库信息,<code>git remote -v</code>来显示更详细的信息;<br>推送分支<code>git push origin master</code>推送主分支<br><code>git push origin dev</code>推其他分支<br><code>git clone</code> 只能克隆master分支,要想把其他分支也整到本地则需<br><code>git checkout -b dev origin/dev</code><br>git pull用来抓取,若git pull 失败请仔细看git给的提示<br>用<code>git branch --set-upstream (branch-name) origin/(branch name)</code>建立关联</li><li>rebase<br><code>git rebase branch-name</code>操作可以把本地未push的分支提交历史整理成直线<br>rebase的目的是是我们在 查看历史提交的变化时更容易</li></ol><h3 id="十一：标签管理"><a href="#十一：标签管理" class="headerlink" title="十一：标签管理"></a>十一：标签管理</h3><ol><li>打标签<br><code>git tag &lt;name&gt;</code>就可以打一个标签<br><code>git tag name commit-id</code>–&gt;对特定的提交打标<br><code>git tag</code>查看标签<br><code>git show name</code>查看标签信息<br><code>git tag -a name -m “” commit-id</code>创建带有说明的标签</li><li>删除标签<br><code>git tag -d name</code> 这能删除本地标签<br><code>git push origin :refs/tags/tag-name</code></li><li>推送标签<br><code>git push origin &lt;tag-name&gt;</code><br>一次性推送所有标签:<code>git push origin --tags</code></li></ol><hr><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Circadian%20Eyes%20-%20What%20Remains%20of%20Our%20Chalk%20Road.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo+Github搭建个人网站（For Ubuntu19.10）</title>
    <url>/2039746793.html</url>
    <content><![CDATA[<!-- build time:Tue Jun 16 2020 10:31:54 GMT+0800 (GMT+08:00) --><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/fengjing1.jpeg" width="848.46" height="300"><a id="more"></a><p><strong>工具：node.js, npm, Hexo, Github<br>前提： git工具， github账号， 基本的git操作</strong></p><hr><h4 id="一：什么是Hexo"><a href="#一：什么是Hexo" class="headerlink" title="一：什么是Hexo"></a>一：什么是Hexo</h4><p><strong>Hexo</strong>是一个快速、简洁且高效的博客框架。 <strong>Hexo</strong>使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><ul><li><strong>nodejs官方网站：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></strong></li><li><strong><em>Hexo的安装和使用，必须有node.js环境</em></strong></li></ul><h4 id="二：准备工作"><a href="#二：准备工作" class="headerlink" title="二：准备工作"></a>二：准备工作</h4><ol><li><strong>什么是node.js？</strong><br>node.js是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境</li><li><strong>安装nodejs和npm</strong><br>对于ubuntu这样的Linux系统来说，安装nodejs和npm比较简单，可以通过终端命令完成<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo apt install nodejs</span><br><span class="line">$sudo apt install npm</span><br></pre></td></tr></table></figure>通过以下命令检查安装的nodejs和npm版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$node -v</span><br><span class="line">$npm -v</span><br></pre></td></tr></table></figure>nodejs官网已推送至12.14.1版本，npm为6.13.4版本，若所安装的版本过低并且像笔者一样不会通过源码包安装的童鞋可以参考下面网站所示方法：<a href="http://github.com/nodesource/distributions/blob/master/README.md" target="_blank" rel="noopener">http://github.com/nodesource/distributions/blob/master/README.md</a></li></ol><h4 id="三：安装Hexo框架"><a href="#三：安装Hexo框架" class="headerlink" title="三：安装Hexo框架"></a>三：安装Hexo框架</h4><ul><li><p>打开终端，依次输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $npm install hexo-cli -g                  #安装hexo-cli命令</span><br><span class="line">$hexo init &lt;file&gt;                                 #初始化博客文件</span><br><span class="line">$cd &lt;file&gt;                                              #跳转到博客文件夹</span><br><span class="line">$npm install                                       #还原各种包的关联</span><br><span class="line">$hexo server                                      #进行预览</span><br></pre></td></tr></table></figure><p>参考网址：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p><p>以上步骤完成后，博客网址完成基本搭建。</p></li></ul><h4 id="四：关联github"><a href="#四：关联github" class="headerlink" title="四：关联github"></a>四：关联github</h4><ol><li><p><strong>在github上新建一个仓库。</strong></p><p>仓库命名要严格按照以下格式：</p></li></ol><pre><code>&lt;github用户名&gt;.github.io</code></pre><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/1.png" alt=""></p><ul><li><p><strong>用README初始化也是必须的。</strong></p></li><li><p><strong><em>由于我已经创建好库，所以会显示重复命名</em></strong></p></li></ul><p><strong>2.获得ssh密匙</strong><br>在本地通过终端输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh-keygen</span><br></pre></td></tr></table></figure><p>一路enter下去，就会在当前用户名下生成一个<strong>.ssh文件夹</strong><br>打开.ssh文件夹中的<strong>id_rsa.pub文件并复制所有内容</strong></p><p><strong>3.在github上填入公匙，即所复制的内容</strong></p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/2.png" alt=""></p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/3.png" alt=""></p><p><img src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/4.png" alt=""></p><p>4.<strong>判断ssh是否添加成功</strong><br>终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现你的用户名，那么表示ssh添加成功</p><p>5.<strong>配置文件，将博客与github关联</strong><br>打开博客根目录下的_config.yml文件，这是博客的配置文件，可在此修改与博客相关的各种信息</p><ul><li>打开后修改最后一行的配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:xiaotong-sun&#x2F;xiaotong-sun.github.io.git        # 根据自己的仓库地址填写</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li></ul><h4 id="五：最后一步"><a href="#五：最后一步" class="headerlink" title="五：最后一步"></a>五：最后一步</h4><p>终端执行：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hexo clean</span><br><span class="line">$hexo g -d</span><br></pre></td></tr></table></figure><p></p><hr><p><audio src="https://xiaotong-sun.oss-cn-beijing.aliyuncs.com/Circadian%20Eyes%20-%20What%20Remains%20of%20Our%20Chalk%20Road.mp3" style="height:20;width:200;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta" autoplay>Your browser does not support the audio tag.</audio></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>学海无涯</category>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
